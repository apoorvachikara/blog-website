{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/hello-world/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Let's share the information via Blog"}},"markdownRemark":{"id":"c990c037-a08e-54fd-927d-01c38974fa86","excerpt":"Javascript is a dynamic typed language and most people do not think it has types. All programming languages have some built-in types and data structures. In…","html":"<p>Javascript is a dynamic typed language and most people do not think it has types. All programming languages have some built-in types and data structures. In this article, I will attempt to cover the types and related interview questions.</p>\n<p>When we talk about a <strong>dynamic typed language</strong>, <strong>JS</strong> is one of the first languages that comes to mind. Of course there are alot of others too, but we will be focusing on JS only.</p>\n<p>Variables are not directly assigned to any specific type, and any variable can be assigned or reassigned values of all types, you are not bound to any specific type. Following are the examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let foo = “bar”;\nfoo = 29;\nfoo = undefined  </code></pre></div>\n<p>All these statements are valid in JS context. However, it is important to know what types are being natively defined by the language. Having a thorough understanding of each type and their behaviour is extremely essential to convert values to different types, it is known as coercion(will be covered in its own blog).</p>\n<h2>Javascript Types - Primitives and Objects</h2>\n<p>There are built-in types provided by the language and it is called primitive types. However, it is feasible to create some types using a <strong>new</strong> operator, we will be discussing it after a few paragraphs.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. null\n2. undefined\n3. boolean\n4. number\n5. string\n6. bigint\n7. symbol (ES6 onwards)</code></pre></div>\n<p>All these types are called primitives and you can use <strong>typeof</strong> operator to inspect the type of any value which returns any one of the seven values specific above.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typeof undefined // “undefined”\ntypeof “hello world” // “string”\ntypeof 1111 // number\ntypeof false // boolean\ntypeof {“foo” : “bar”} // “object”\ntypeof BigInt(1234) // “bigint”\ntypeof Symbol() // “symbol”</code></pre></div>\n<p>You might have noticed why I haven’t included the type null in the above examples because its <em>special</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typeof null // “object” → why is that!!!</code></pre></div>\n<p>If it is a primitive type, it should have returned <em>null</em>? This is a bug in JS, yes, and it has been there for more than two decades and seems will never be fixed. As lot of web software might be dependent on this and it will create a lot more bugs. So, How we check if the value is null or not?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let a = null;\nif (!a &amp;&amp; typeof a === “object”) console.log(`Yes, ${a} is null!`);</code></pre></div>\n<p>Note: <strong>null</strong> is the only primitive type which is falsy(it is evaluated false in conditions), but returns as “object”. I will cover falsy and truthy values later in this blog</p>","frontmatter":{"title":"Types in Javascript","date":"December 04, 2021","description":"Understanding types in JS is one of the fundamental concepts. You will be ready to crack any interview after reading this blog."}},"previous":{"fields":{"slug":"/My new blog Final/"},"frontmatter":{"title":"Hello World final test"}},"next":null},"pageContext":{"id":"c990c037-a08e-54fd-927d-01c38974fa86","previousPostId":"4d1d5ab2-9db8-529e-a814-28b0caddae68","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}