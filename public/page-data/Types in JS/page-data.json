{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/Types in JS/",
    "result": {"data":{"site":{"siteMetadata":{"title":"One Stop for JS full-stack"}},"markdownRemark":{"id":"a440ba58-f43e-5273-9859-e6b943573786","excerpt":"Javascript is a dynamically typed language and most people do not think it has types. All programming languages have some built-in types and data structures. In…","html":"<p>Javascript is a dynamically typed language and most people do not think it has types. All programming languages have some built-in types and data structures. In this article, I will attempt to cover the types and related interview questions.</p>\n<p>When we talk about a <strong>dynamically typed language</strong>, <strong>JS</strong> is one of the first languages that comes to mind. Of course there are a lot of others too, but we will be focusing on JS only.</p>\n<p>Variables are not directly assigned to any specific type, and any variable can be assigned or reassigned values of all types, you are not bound to any specific type. Following are the examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let foo = “bar”;\nfoo = 29;\nfoo = undefined  </code></pre></div>\n<p>All these statements are valid in the JS context. However, it is important to know what types are being natively defined by the language. Having a thorough understanding of each type and their behavior is extremely essential to convert values to different types, it is known as coercion(will be covered in its own blog).</p>\n<h2>Javascript Types primitive and object</h2>\n<p>There are built-in types provided by the language and it is called primitive types. However, it is feasible to create some types using a <strong>new</strong> operator which becomes the object, we will be discussing it after a few paragraphs.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    null\n    undefined\n    boolean\n    number\n    string\n    bigint\n    symbol (ES6 onwards)</code></pre></div>\n<p>All these types are called primitives and you can use <strong>typeof</strong> operator to inspect the type of any value which returns any one of the seven values specificed above.</p>\n<p><strong>Note</strong> : All types except objects define immutable values (that is, values which can’t be changed).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typeof undefined // “undefined”\ntypeof “hello world” // “string”\ntypeof 1111 // number\ntypeof false // boolean\ntypeof {“foo” : “bar”} // “object”\ntypeof BigInt(1234) // “bigint”\ntypeof Symbol() // “symbol”</code></pre></div>\n<p>You might have noticed why I haven’t included the type null in the above examples because its <em>special</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typeof null // “object” → why is that!!!</code></pre></div>\n<p>If it is a primitive type, it should have returned <em>null</em>? This is a bug in JS, yes, and it has been there for more than two decades and seems will never be fixed. A lot of web software might be dependent on this and it will create a lot more bugs. So, how do we check if the value is null or not?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let a = null;\nif (!a &amp;&amp; typeof a === “object”) console.log(`Yes, ${a} is null!`);</code></pre></div>\n<p>Note: <strong>null</strong> is the only primitive type which is falsy(it is evaluated false in conditions), but returns as “object”. I will cover falsy and truthy values later in this blog</p>\n<p><strong>Objects</strong> are collections of key/values pairs. The keys should be strings even if you use number/boolean it will be parsed to string(toString is called) and the values can be of any type mentioned above or objects. You can access value using ’.’/dot operator or object[‘key’].</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = {'foo': 'bar', true: 'false', 1: 'numeric value'};\nobj.foo // bar\nobj.true // false\nobj.1 // it will be an error --> Uncaught SyntaxError: Unexpected number</code></pre></div>\n<p>Why the last one is throwing an error if all the keys are parsed to strings? Because numbers can’t be a valid variable name, converting number to string will allow accessing the value. You can check this <a href=\"https://stackoverflow.com/questions/8698792/javascript-object-key-beginning-with-number-allowed\">stackoverflow</a> link for more details.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = {'foo': 'bar', true: 'false', \"1\": 'numeric value'};\nobj.foo // bar\nobj.true // false\nobj[\"1\"] // numeric value</code></pre></div>\n<h2>Interview questions on Types</h2>\n<ol>\n<li>\n<p>What is the o/p of the below code?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> typeof typeof false // “string”\n </code></pre></div>\n</li>\n</ol>\n<p>When we run first <strong>typeof</strong>, it returns the value <strong>‘boolean’</strong>. Now, the ypeof\n<strong>‘boolean’</strong> will return string as it is quoted in the string(typeof return value is of type\nstring).</p>\n<ol start=\"2\">\n<li>\n<p>What is the o/p of the below code?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> typeof NaN // “number”\n typeof infinity // “number”\n typeof [1, 2, 4] // “object”\n  </code></pre></div>\n<ul>\n<li>\n<p>The first one is a property NaN(Not a Number), it is returned when converting any invalid number(ex +“3a” will return NaN). You can also check Number.IsNaN(value), itreturns boolean value.</p>\n</li>\n<li>\n<p>The second one is <strong>Infinity</strong>. This property is on global object represent numeric infinity. So it return <strong>”number”</strong> as type</p>\n</li>\n<li>\n<p>The Third one is an array. When we check the typeof array, it returns object which is correct as arrays are objects in JS(not only arrays everything is object). If you want to check if an object is an array there could be different ways, one of those is using a method on Array class. <strong>Array.isArray([1, 2, 3])</strong>. This will return value in boolean either <strong>true/false</strong>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>What is the o/p of the below code?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> \tlet func = () => {};\n \ttypeof func; // “function”</code></pre></div>\n</li>\n</ol>\n<p>Why? “function”!!! , it should return “object” as functions are first class objects. There is no such type in JS. So, the main reason to provide it is to provide some helpful specification to the developers (do let me know if you find a more verbose answer).</p>","frontmatter":{"title":"Types in Javascript","date":"December 10, 2021","description":"Understanding types in JS is one of the fundamental concepts. You will be ready to answer any `types` based questions after reading this blog. Please leave your comments on github if you feel any information is incorrect."}},"previous":null,"next":null},"pageContext":{"id":"a440ba58-f43e-5273-9859-e6b943573786","previousPostId":null,"nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}